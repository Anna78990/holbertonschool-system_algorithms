#include <stdlib.h>
#include "heap.h"
#include "huffman.h"

/**
 * huffman_tree - Builds the Huffman tree
 *
 * @data: Array of characters
 * @freq: Array of frequencies associated with each character
 * @size: Size of the arrays
 *
 * Return: Pointer to the root node of the Huffman tree,
 *         or NULL if it fails
 */
binary_tree_node_t *huffman_tree(char *data, size_t *freq, size_t size)
{
    heap_t *priority_queue;
    symbol_t *symbol;
    binary_tree_node_t *node, *node1, *node2, *root;
    size_t i;

    if (!size || !data || !freq)
        return (NULL);

    priority_queue = huffman_priority_queue(data, freq, size);
    if (!priority_queue)
        return (NULL);

    while (priority_queue->size > 1)
    {
        node1 = heap_extract(priority_queue);
        node2 = heap_extract(priority_queue);

        symbol = symbol_create(-1, node1->data->freq + node2->data->freq);
        if (!symbol)
        {
            heap_delete(priority_queue, free);
            return (NULL);
        }

        node = binary_tree_node(NULL, symbol);
        if (!node)
        {
            free(symbol);
            heap_delete(priority_queue, free);
            return (NULL);
        }

        node->left = node1;
        node->right = node2;
        node1->parent = node;
        node2->parent = node;

        if (heap_insert(priority_queue, node) == NULL)
        {
            heap_delete(priority_queue, free);
            return (NULL);
        }
    }

    root = priority_queue->root->data;
    heap_delete(priority_queue, NULL);
    return (root);
}

